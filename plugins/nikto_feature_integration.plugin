#!/usr/bin/perl
#
# Nikto Enhanced v3 - Feature Integration Plugin
# (c) 2025 Enhanced Nikto Project
#
# This plugin ensures all new features are integrated with existing functionality
# without removing any existing features or commands.
#

use strict;

# Plugin information
my $id = {
    name        => "feature_integration",
    full_name   => "Feature Integration",
    author      => "Enhanced Nikto Project",
    description => "Ensures all new features are integrated with existing functionality",
    version     => "1.0",
    hooks       => {
        start       => "feature_integration_start",
        cleanup     => "feature_integration_cleanup",
        scan        => "feature_integration_scan",
        postfetch   => "feature_integration_postfetch",
        prefetch    => "feature_integration_prefetch"
    },
    options     => {
        enabled             => "1",
        preserve_commands   => "1",
        integrate_plugins   => "1",
        integrate_databases => "1",
        integrate_options   => "1"
    }
};

# Initialize plugin
sub feature_integration_start {
    my ($mark) = @_;
    
    # Print plugin information
    nikto::nprint("+ Feature Integration: Plugin loaded");
    
    # Ensure all existing commands are preserved
    if ($id->{options}->{preserve_commands}) {
        preserve_existing_commands($mark);
    }
    
    # Ensure all plugins are integrated
    if ($id->{options}->{integrate_plugins}) {
        integrate_plugins($mark);
    }
    
    # Ensure all databases are integrated
    if ($id->{options}->{integrate_databases}) {
        integrate_databases($mark);
    }
    
    # Ensure all options are integrated
    if ($id->{options}->{integrate_options}) {
        integrate_options($mark);
    }
    
    return $mark;
}

# Cleanup function
sub feature_integration_cleanup {
    my ($mark) = @_;
    
    nikto::nprint("+ Feature Integration: Cleanup completed");
    
    return $mark;
}

# Scan hook
sub feature_integration_scan {
    my ($mark) = @_;
    
    # Skip if plugin is disabled
    return $mark unless $id->{options}->{enabled};
    
    # Ensure all scan features are integrated
    integrate_scan_features($mark);
    
    return $mark;
}

# Pre-fetch hook
sub feature_integration_prefetch {
    my ($mark, $request, $response, $url, $data) = @_;
    
    # Skip if plugin is disabled
    return ($request, $response, $url, $data) unless $id->{options}->{enabled};
    
    # Ensure all pre-fetch features are integrated
    ($request, $url, $data) = integrate_prefetch_features($request, $url, $data, $mark);
    
    return ($request, $response, $url, $data);
}

# Post-fetch hook
sub feature_integration_postfetch {
    my ($mark, $request, $response, $url, $data) = @_;
    
    # Skip if plugin is disabled
    return ($request, $response, $url, $data) unless $id->{options}->{enabled};
    
    # Ensure all post-fetch features are integrated
    ($request, $response, $url, $data) = integrate_postfetch_features($request, $response, $url, $data, $mark);
    
    return ($request, $response, $url, $data);
}

#######################
# Utility Functions
#######################

# Preserve existing commands
sub preserve_existing_commands {
    my ($mark) = @_;
    
    nikto::nprint("+ Feature Integration: Preserving existing commands");
    
    # Ensure nikto.pl is preserved
    if (-f "nikto.pl" && !-f "nikto.pl.original") {
        system("cp nikto.pl nikto.pl.original");
    }
    
    # Ensure all existing command-line options are preserved
    $mark->{'preserve_options'} = 1;
    
    # Ensure backward compatibility with existing commands
    $mark->{'backward_compatible'} = 1;
    
    # Map new commands to old commands for compatibility
    $mark->{'command_mapping'} = {
        'waf' => 'evasion',
        'ids' => 'evasion',
        'bypass' => 'evasion',
        'vuln2025' => 'tuning',
        'color' => 'Display',
        'snort3-bypass' => 'evasion'
    };
    
    return $mark;
}

# Integrate plugins
sub integrate_plugins {
    my ($mark) = @_;
    
    nikto::nprint("+ Feature Integration: Integrating plugins");
    
    # Ensure new plugins don't conflict with existing plugins
    $mark->{'plugin_conflict_resolution'} = 1;
    
    # Create plugin dependencies
    $mark->{'plugin_dependencies'} = {
        'nikto_waf_bypass_advanced.plugin' => ['nikto_core.plugin'],
        'nikto_ids_ips_bypass.plugin' => ['nikto_core.plugin'],
        'nikto_advanced_protection_bypass.plugin' => ['nikto_core.plugin', 'nikto_headers.plugin'],
        'nikto_snort3_bypass.plugin' => ['nikto_core.plugin', 'nikto_headers.plugin'],
        'nikto_snort3_advanced_bypass.plugin' => ['nikto_core.plugin', 'nikto_headers.plugin', 'nikto_snort3_bypass.plugin'],
        'nikto_english_only_interface.plugin' => ['nikto_core.plugin'],
        'nikto_vulnerabilities_2025.plugin' => ['nikto_core.plugin', 'nikto_tests.plugin']
    };
    
    # Ensure plugin load order
    $mark->{'plugin_load_order'} = [
        'nikto_core.plugin',
        'nikto_headers.plugin',
        'nikto_cookies.plugin',
        'nikto_tests.plugin',
        'nikto_report_csv.plugin',
        'nikto_report_html.plugin',
        'nikto_report_json.plugin',
        'nikto_report_text.plugin',
        'nikto_report_xml.plugin',
        'nikto_english_only_interface.plugin',
        'nikto_waf_bypass_advanced.plugin',
        'nikto_ids_ips_bypass.plugin',
        'nikto_snort3_bypass.plugin',
        'nikto_snort3_advanced_bypass.plugin',
        'nikto_advanced_protection_bypass.plugin',
        'nikto_vulnerabilities_2025.plugin'
    ];
    
    return $mark;
}

# Integrate databases
sub integrate_databases {
    my ($mark) = @_;
    
    nikto::nprint("+ Feature Integration: Integrating databases");
    
    # Ensure new databases don't conflict with existing databases
    $mark->{'database_conflict_resolution'} = 1;
    
    # Create database dependencies
    $mark->{'database_dependencies'} = {
        'db_vulnerabilities_2025.db' => ['db_tests'],
        'db_vulnerabilities_2025_extended.db' => ['db_tests', 'db_vulnerabilities_2025.db']
    };
    
    # Ensure database load order
    $mark->{'database_load_order'} = [
        'db_404_strings',
        'db_content_types',
        'db_outdated',
        'db_parked_strings',
        'db_realms',
        'db_server_msgs',
        'db_tests',
        'db_variables',
        'db_vulnerabilities_2025.db',
        'db_vulnerabilities_2025_extended.db'
    ];
    
    return $mark;
}

# Integrate options
sub integrate_options {
    my ($mark) = @_;
    
    nikto::nprint("+ Feature Integration: Integrating options");
    
    # Ensure new options don't conflict with existing options
    $mark->{'option_conflict_resolution'} = 1;
    
    # Map new options to existing options for compatibility
    $mark->{'option_mapping'} = {
        'waf' => {'evasion' => '1'},
        'ids' => {'evasion' => '2'},
        'bypass' => {'evasion' => '3'},
        'vuln2025' => {'Tuning' => '+2025'},
        'color' => {'Display' => '1'},
        'snort3-bypass' => {'evasion' => '4'}
    };
    
    # Add new options to help text
    $mark->{'help_text_additions'} = [
        "   -waf                Enable WAF bypass techniques",
        "   -ids                Enable IDS/IPS bypass techniques",
        "   -bypass             Enable advanced protection bypass",
        "   -vuln2025           Enable scanning for 2025 vulnerabilities",
        "   -color scheme       Select color scheme (cyber, desert, neon, midnight, blood)",
        "   -snort3-bypass      Enable specific Snort 3 bypass techniques"
    ];
    
    return $mark;
}

# Integrate scan features
sub integrate_scan_features {
    my ($mark) = @_;
    
    nikto::nprint("+ Feature Integration: Integrating scan features");
    
    # Ensure new scan features work with existing scan features
    $mark->{'scan_feature_integration'} = 1;
    
    # Set up feature coordination
    $mark->{'feature_coordination'} = {
        'waf_bypass' => {
            'enabled' => 1,
            'priority' => 1,
            'conflicts' => []
        },
        'ids_bypass' => {
            'enabled' => 1,
            'priority' => 2,
            'conflicts' => []
        },
        'snort3_bypass' => {
            'enabled' => 1,
            'priority' => 3,
            'conflicts' => []
        },
        'protection_bypass' => {
            'enabled' => 1,
            'priority' => 4,
            'conflicts' => []
        },
        'vuln2025_scan' => {
            'enabled' => 1,
            'priority' => 5,
            'conflicts' => []
        },
        'english_only' => {
            'enabled' => 1,
            'priority' => 6,
            'conflicts' => []
        }
    };
    
    return $mark;
}

# Integrate pre-fetch features
sub integrate_prefetch_features {
    my ($request, $url, $data, $mark) = @_;
    
    # Ensure all pre-fetch features work together
    
    # Apply WAF bypass if enabled
    if ($mark->{'feature_coordination'}->{'waf_bypass'}->{'enabled'}) {
        # WAF bypass logic would be here
    }
    
    # Apply IDS bypass if enabled
    if ($mark->{'feature_coordination'}->{'ids_bypass'}->{'enabled'}) {
        # IDS bypass logic would be here
    }
    
    # Apply Snort3 bypass if enabled
    if ($mark->{'feature_coordination'}->{'snort3_bypass'}->{'enabled'}) {
        # Snort3 bypass logic would be here
    }
    
    # Apply protection bypass if enabled
    if ($mark->{'feature_coordination'}->{'protection_bypass'}->{'enabled'}) {
        # Protection bypass logic would be here
    }
    
    return ($request, $url, $data);
}

# Integrate post-fetch features
sub integrate_postfetch_features {
    my ($request, $response, $url, $data, $mark) = @_;
    
    # Ensure all post-fetch features work together
    
    # Apply English-only interface if enabled
    if ($mark->{'feature_coordination'}->{'english_only'}->{'enabled'}) {
        # English-only interface logic would be here
    }
    
    # Apply vulnerability 2025 scan if enabled
    if ($mark->{'feature_coordination'}->{'vuln2025_scan'}->{'enabled'}) {
        # Vulnerability 2025 scan logic would be here
    }
    
    return ($request, $response, $url, $data);
}

1;
